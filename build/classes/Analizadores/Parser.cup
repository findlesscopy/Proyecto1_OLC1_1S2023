package Analizadores;
import java_cup.runtime.*;
import java.util.ArrayList;
import Arbol.Nodo;
import Arbol.Arbol;
import Errores.ErroresSintacticos;
//PARSER
parser code
{://Codigo visible
    public ArrayList<Arbol> listadoExpresiones = new ArrayList<>();

    public ArrayList<String> nombres = new ArrayList<>();
    public static ArrayList<ErroresSintacticos> erroresSintacticos = new ArrayList<>();
    public void syntax_error(Symbol s){
        erroresSintacticos.add(new ErroresSintacticos(false,s.value.toString(), s.left+1, s.right+1));
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        erroresSintacticos.add(new ErroresSintacticos(true,s.value.toString(), s.left+1, s.right+1));
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

:}
// COMENTARIOS Y ESPACIOS IGNORADOS

//PALABRAS RESERVADAS

terminal String CONJ, LL_ABRE, LL_CIERRA, D_PUNTOS, P_COMA, COMA, FLECHA, VIRGULILLA,
PORCENTAJE, OR, CONCAT, POSITIVA, KLEENE, OPCIONAL, L_MINUSCULA, L_MAYUSCULA, DIGITO, ESPECIAL,
ID, CARACTER, CADENA;

non terminal olc;
non terminal definiciones, definicion, expresion_regular, rango, listado, unico;
non terminal pruebas, prueba;

start with olc;

olc::= LL_ABRE definiciones PORCENTAJE PORCENTAJE PORCENTAJE PORCENTAJE pruebas LL_CIERRA;

definiciones::= definiciones definicion
               | definicion;

definicion::= CONJ D_PUNTOS ID FLECHA rango P_COMA
             |ID:b FLECHA expresion_regular:a P_COMA {: listadoExpresiones.add(new Arbol((Nodo)a));  nombres.add(b); :};

rango::= L_MINUSCULA VIRGULILLA L_MINUSCULA
        | L_MAYUSCULA VIRGULILLA L_MAYUSCULA
        | DIGITO VIRGULILLA DIGITO
        | ESPECIAL VIRGULILLA ESPECIAL
        | listado;

listado::= listado COMA unico
          | unico;

unico::= L_MINUSCULA
        | L_MAYUSCULA
        | DIGITO
        | ESPECIAL;

expresion_regular::= CONCAT:a expresion_regular:b expresion_regular:c {: Nodo padre = new Nodo(a); padre.setIzquierda((Nodo)b); padre.setDerecha((Nodo)c); RESULT = padre; :}
                    | OR:a expresion_regular:b expresion_regular:c {:Nodo padre = new Nodo(a); padre.setIzquierda((Nodo)b); padre.setDerecha((Nodo)c); RESULT = padre; :}
                    | POSITIVA:a expresion_regular:b {: Nodo padre = new Nodo(a); padre.setDerecha((Nodo)b); RESULT = padre;:}
                    | KLEENE:a expresion_regular:b {: Nodo padre = new Nodo(a); padre.setDerecha((Nodo)b); RESULT = padre; :}
                    | OPCIONAL:a expresion_regular:b {: Nodo padre = new Nodo(a); padre.setDerecha((Nodo)b); RESULT = padre; :}
                    | CARACTER:a {: Nodo leaf = new Nodo(a); leaf.setLeaf(true); RESULT = leaf; :}
                    | LL_ABRE ID:a LL_CIERRA {: Nodo leaf = new Nodo(a); leaf.setLeaf(true); RESULT = leaf; :}
                    ;

pruebas ::= pruebas prueba
           | prueba;

prueba::= ID D_PUNTOS CADENA P_COMA;
